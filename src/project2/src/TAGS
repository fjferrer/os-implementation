
common/fmtout.c,1059
typedef long intmax_t;43,1225
typedef unsigned long uintmax_t;44,1248
typedef unsigned long uintptr_t;45,1281
#define ASSERT(48,1325
enum flags 51,1387
  FL_ZERO 52,1400
  FL_ZERO   = 0x01,x0152,1400
  FL_MINUS 53,1441
  FL_MINUS  = 0x02,x0253,1441
  FL_PLUS 54,1483
  FL_PLUS   = 0x04,x0454,1483
  FL_TICK 55,1524
  FL_TICK   = 0x08,x0855,1524
  FL_SPACE 56,1562
  FL_SPACE  = 0x10,x1056,1562
  FL_HASH 57,1604
  FL_HASH   = 0x20,x2057,1604
  FL_SIGNED 58,1642
  FL_SIGNED = 0x40,x4058,1642
  FL_UPPER 59,1686
  FL_UPPER  = 0x80	x8059,1686
enum ranks 63,1797
  rank_char	64,1810
  rank_short	65,1828
  rank_int 66,1847
  rank_long	67,1864
  rank_longlong	69,1887
#define MIN_RANK	73,1919
#define MAX_RANK	74,1946
#define INTMAX_RANK	76,1974
#define SIZE_T_RANK	77,2004
#define PTRDIFF_T_RANK	78,2034
#define EMIT(81,2078
#define NDIGITS_MAX 94,2604
format_int(97,2642
int Format_Output(228,5790
    st_normal,241,6111
    st_flags,242,6147
    st_width,243,6183
    st_prec,244,6217
    st_modifiers	245,6254

common/memmove.c,17
memmove(37,1588

common/string.c,659
extern void *Malloc(Malloc20,448
void* memset(22,483
void* memcpy(34,645
int memcmp(47,867
size_t strlen(62,1081
size_t strnlen(78,1467
int strcmp(86,1602
int strncmp(97,1770
char *strcat(strcat113,2034
char *strcpy(strcpy125,2190
char *strncpy(strncpy137,2346
char *strdup(strdup151,2557
int atoi(161,2679
char *strchr(strchr174,2851
char *strrchr(strrchr184,2980
char *strpbrk(strpbrk197,3162
struct String_Output_Sink 213,3398
    struct Output_Sink o;214,3426
    char *s;s215,3452
    size_t n,216,3465
    size_t n, size;216,3465
static void String_Emit(219,3489
static void String_Finish(228,3674
int snprintf(242,3988

libc/entry.c,55
int main(13,351
void Exit(14,384
void _Entry(19,483

libc/process.c,72
DEF_SYSCALL(19,489
#define CMDLEN 28,991
int Spawn_With_Path(47,1364

libc/conio.c,354
static bool s_echo 15,328
    const char *arg0 = str; size_t arg1 19,448
DEF_SYSCALL(20,519
int Put_Char(38,1066
void Echo(46,1182
void Read_Line(51,1231
const char *Get_Error_String(Get_Error_String123,2470
static void Print_Emit(143,2966
static void Print_Finish(144,3038
static struct Output_Sink s_outputSink 145,3090
void Print(147,3164

libc/libuser.h,361
typedef unsigned short Keycode;10,127
int Null(12,160
void Exit(13,176
int Print_String(14,193
Keycode Get_Key(15,232
int Spawn_Program(16,255
int Wait(17,289
void *Malloc(Malloc19,318
void* memset(21,352
void* memcpy(22,392
size_t strlen(23,444
int strcmp(24,474
char *strcat(strcat25,518
char *strdup(strdup26,552
char *strcpy(strcpy27,576

libc/compat.c,26
void *Malloc(Malloc4,40

user/shell.c,869
#define BUFSIZE 16,417
#define DEFAULT_PATH 17,436
#define INFILE	19,466
#define OUTFILE	20,485
#define PIPE	21,505
#define ISSPACE(23,523
struct Process 25,571
    int flags;26,588
    char program[program27,603
    char infile[infile28,632
    char outfile[outfile29,660
    char *command;command30,689
    int pid;31,708
    int readfd,32,721
    int readfd, writefd;32,721
    int pipefd;33,746
char *Strip_Leading_Whitespace(Strip_Leading_Whitespace36,766
void Trim_Newline(37,807
char *Copy_Token(Copy_Token38,835
int Build_Pipeline(39,875
void Spawn_Single_Command(40,937
#define MAXPROC 43,1078
int exitCodes 45,1097
int main(47,1117
char *Strip_Leading_Whitespace(Strip_Leading_Whitespace110,2681
void Trim_Newline(121,2857
char *Copy_Token(Copy_Token135,3190
int Build_Pipeline(151,3424
void Spawn_Single_Command(260,5995

user/c.c,15
int main(8,95

user/b.c,15
int main(7,67

user/long.c,15
int main(5,44

user/null.c,15
int main(7,69

geekos/gdt.c,308
extern void Load_GDTR(19,417
#define NUM_GDT_ENTRIES 28,672
static struct Segment_Descriptor s_GDT[s_GDT33,756
static int s_numAllocated 38,859
struct Segment_Descriptor* Allocate_Segment_Descriptor(48,1143
void Free_Segment_Descriptor(75,1653
int Get_Descriptor_Index(91,1964
void Init_GDT(99,2099

geekos/malloc.c,63
void Init_Heap(20,479
void* Malloc(31,766
void Free(48,1022

geekos/kthread.c,1715
static struct All_Thread_List s_allThreadList;28,689
static struct Thread_Queue s_runQueue;33,774
struct Kernel_Thread* g_currentThread;38,840
int g_needReschedule;45,1081
volatile int g_preemptionDisabled;52,1272
static struct Thread_Queue s_graveyardQueue;59,1454
static struct Thread_Queue s_reaperWaitQueue;60,1499
static unsigned int s_tlocalKeyCounter 67,1751
static tlocal_destructor_t s_tlocalDestructors[s_tlocalDestructors68,1795
static void Init_Thread(77,2076
static struct Kernel_Thread* Create_Thread(109,2971
static __inline__ void Push(149,3982
static void Destroy_Thread(161,4289
static void Reap_Thread(180,4713
static void Detach_Thread(190,4949
static void Launch_Thread(207,5402
static void Push_General_Registers(215,5525
static void Shutdown_Thread(235,6080
static void Setup_Kernel_Thread(243,6200
/*static*/ void Setup_User_Thread(303,8019
static void Idle(325,8734
static void Reaper(335,8899
static __inline__ struct Kernel_Thread* Find_Best(382,10049
static __inline__ const void** Get_Tlocal_Pointer(398,10536
static void Tlocal_Exit(415,11109
void Init_Scheduler(444,11769
struct Kernel_Thread* Start_Kernel_Thread(480,12894
Start_User_Thread(508,13537
void Make_Runnable(525,14028
void Make_Runnable_Atomic(536,14252
struct Kernel_Thread* Get_Current(546,14446
struct Kernel_Thread* Get_Next_Runnable(555,14604
void Schedule(577,15149
void Yield(603,15871
void Exit(615,16084
int Join(651,16878
struct Kernel_Thread* Lookup_Thread(682,17473
void Wait(720,18471
void Wake_Up(739,18929
void Wake_Up_One(764,19563
int Tlocal_Create(782,19936
void Tlocal_Put(800,20310
void *Tlocal_Get(Tlocal_Get813,20507
void Dump_All_Thread_List(827,20727

geekos/screen.c,1638
#define ESC 28,784
#define DEFAULT_ATTRIBUTE 29,810
enum State 31,857
    S_NORMAL,32,870
    S_ESC,33,932
    S_ESC2,34,999
    S_ARG,35,1070
    S_CMD,36,1116
#define MAXARGS 39,1146
struct Console_State 41,1215
    int row,43,1274
    int row, col;43,1274
    int saveRow,44,1292
    int saveRow, saveCol;44,1292
    uchar_t currentAttr;45,1318
    enum State state;48,1405
    int argList[argList49,1427
    int numArgs;50,1453
static struct Console_State s_cons;53,1474
#define NUM_SCREEN_DWORDS 55,1511
#define NUM_SCROLL_DWORDS 56,1567
#define NUM_DWORDS_PER_LINE 57,1627
#define FILL_DWORD 58,1671
static void Scroll(64,1848
static void Clear_To_EOL(85,2306
static void Newline(99,2589
static void Put_Graphic_Char(114,2886
static void Output_Literal_Character(133,3364
static void Move_Cursor(168,4058
static const uchar_t s_ansiToVgaColor[s_ansiToVgaColor187,4364
static void Update_Attributes(195,4547
static void Reset(215,5119
static void Start_Escape(222,5233
static void Start_Arg(229,5373
static void Save_Cursor(239,5590
static void Restore_Cursor(246,5728
static void Add_Digit(253,5879
static int Get_Arg(267,6178
static void Put_Char_Imp(278,6447
static void Update_Cursor(353,7967
void Init_Screen(393,9110
void Clear_Screen(407,9357
void Get_Cursor(424,9624
bool Put_Cursor(437,9905
uchar_t Get_Current_Attr(456,10230
void Set_Current_Attr(464,10344
void Put_Char(475,10626
void Put_String(487,10866
void Put_Buf(500,11125
static void Print_Emit(512,11353
static void Print_Finish(513,11429
static struct Output_Sink s_outputSink 514,11498
void Print(520,11679

geekos/lowlevel.asm,1604
INTERRUPT_STATE_SIZE 24,827
REG_SKIP 76,2162
align 82,2348
align 92,2665
IMPORT 105,3084
IMPORT 108,3174
IMPORT 112,3284
IMPORT 115,3356
IMPORT 118,3447
IMPORT 121,3518
IMPORT 124,3595
EXPORT 131,3920
EXPORT 132,3946
EXPORT 135,4024
EXPORT 136,4041
EXPORT 137,4058
EXPORT 140,4136
EXPORT 141,4166
EXPORT 144,4229
EXPORT 147,4297
align 158,4572
Load_IDTR:Load_IDTR159,4580
align 167,4749
Load_GDTR:Load_GDTR168,4757
.here:.here179,4926
align 183,4995
Load_LDTR:Load_LDTR184,5003
align 193,5211
Handle_Interrupt:Handle_Interrupt194,5219
.restore:.restore244,6570
align 267,7241
Switch_To_Thread:Switch_To_Thread268,7250
align 327,8844
Get_Current_EFLAGS:Get_Current_EFLAGS328,8853
align 338,9267
g_entryPointTableStart:g_entryPointTableStart339,9275
Int_No_Err 343,9381
align 344,9394
Before_No_Err:Before_No_Err345,9402
Int_No_Err 346,9417
align 347,9430
After_No_Err:After_No_Err348,9438
Int_No_Err 349,9452
Int_No_Err 350,9502
Int_No_Err 351,9515
Int_No_Err 352,9528
Int_No_Err 353,9541
Int_No_Err 354,9554
align 355,9567
Before_Err:Before_Err356,9575
Int_With_Err 357,9587
align 358,9602
After_Err:After_Err359,9610
Int_No_Err 360,9621
Int_With_Err 361,9671
Int_With_Err 362,9687
Int_With_Err 363,9703
Int_With_Err 364,9719
Int_With_Err 365,9735
Int_No_Err 366,9751
Int_No_Err 367,9802
Int_With_Err 368,9816
Int_No_Err 374,9995
align 378,10046
g_entryPointTableEnd:g_entryPointTableEnd379,10054
align 385,10194
g_handlerSizeNoErr:g_handlerSizeNoErr386,10202
align 387,10256
g_handlerSizeErr:g_handlerSizeErr388,10264

geekos/main.c,338
#  define ROOT_DEVICE 39,983
#  define ROOT_PREFIX 40,1011
#  define ROOT_DEVICE 42,1043
#  define ROOT_PREFIX 43,1072
#define INIT_PROGRAM 46,1106
static void Mount_Root_Filesystem(50,1159
static void Spawn_Init_Process(51,1200
void Main(58,1358
static void Mount_Root_Filesystem(89,1902
static void Spawn_Init_Process(99,2119

geekos/vfs.c,1332
static struct Mutex s_vfsLock;34,1042
int debugVFS 36,1074
#define Debug(37,1092
DEFINE_LIST(41,1170
IMPLEMENT_LIST(42,1214
static struct Mount_Point_List s_mountPointList;45,1297
struct Filesystem 48,1383
    struct Filesystem_Ops *ops;ops49,1403
    char fsName[fsName50,1435
    DEFINE_LINK(51,1477
DEFINE_LIST(54,1527
IMPLEMENT_LIST(55,1569
static struct Filesystem_List s_filesystemList;58,1658
static struct Paging_Device *s_pagingDevice;s_pagingDevice61,1739
#define MAX_PREFIX_LEN 63,1785
static bool Unpack_Path(76,2183
static struct Filesystem *Lookup_Filesystem(Lookup_Filesystem134,3488
static struct Mount_Point *Lookup_Mount_Point(Lookup_Mount_Point156,4001
static int Do_Open(179,4622
static int Do_Open_File(209,5381
static int Do_Open_Directory(218,5682
bool Register_Filesystem(237,6426
int Format(272,7348
int Mount(309,8314
int Open(384,10334
int Close(399,10788
int Stat(418,11178
int Sync(444,11866
struct File *Allocate_File(Allocate_File475,12700
int FStat(499,13271
int Read(516,13735
int Write(532,14152
int Seek(548,14484
int Read_Fully(566,14947
int Create_Directory(616,15919
int Delete(643,16588
int Open_Directory(671,17270
int Read_Entry(683,17595
void Register_Paging_Device(694,17810
struct Paging_Device *Get_Paging_Device(Get_Paging_Device706,18171

geekos/synch.c,315
static void Mutex_Wait(35,1003
static __inline__ void Mutex_Lock_Imp(51,1338
static __inline__ void Mutex_Unlock_Imp(72,1806
void Mutex_Init(104,2732
void Mutex_Lock(114,2902
void Mutex_Unlock(126,3104
void Cond_Init(138,3318
void Cond_Wait(146,3466
void Cond_Signal(188,4663
void Cond_Broadcast(200,4995

geekos/elf.c,33
int Parse_ELF_Executable(31,964

geekos/argblock.c,204
static bool Is_Space(19,463
static const char *Skip_Whitespace(Skip_Whitespace29,678
static unsigned Get_Argument_Len(41,928
void Get_Argument_Block_Size(62,1441
void Format_Argument_Block(111,2841

geekos/io.c,116
void Out_Byte(15,302
uchar_t In_Byte(27,473
void Out_Word(43,668
ushort_t In_Word(55,840
void IO_Delay(72,1080

geekos/timer.c,477
volatile ulong_t g_numTicks;22,500
static int s_spinCountPerTick;27,604
#define CALIBRATE_NUM_TICKS	32,705
#define DEFAULT_MAX_TICKS 38,852
int g_Quantum 43,909
#define TICKS_PER_SEC 50,1066
#  define Debug(54,1137
#  define Debug(56,1180
static void Timer_Interrupt_Handler(63,1386
static void Timer_Calibrate(91,1968
static void Spin(111,2448
static void Calibrate_Delay(137,3037
void Init_Timer(181,4060
#define US_PER_TICK 202,4549
void Micro_Delay(209,4724

geekos/fd_boot.asm,627
BeginText:BeginText36,1069
after_move:after_move51,1530
load_setup:load_setup64,1910
.again:.again70,2047
load_kernel:load_kernel90,2523
.again:.again102,2972
ReadSector:ReadSector140,4103
.again:.again193,5260
.here:.here226,6106
.done:.done228,6124
head:head241,6439
track:track242,6450
sec:sec243,6462
num_retries:num_retries244,6472
sec_count:sec_count247,6536
max_sector:max_sector248,6552
Pad_From_Symbol 251,6645
setupStart:setupStart276,7103
setupSize:setupSize280,7194
kernelStart:kernelStart284,7285
kernelSize:kernelSize288,7385
Pad_From_Symbol 293,7527
Signature 294,7576

geekos/irq.c,262
static ushort_t s_irqMask 24,695
#define MASTER(29,789
#define SLAVE(30,826
void Install_IRQ(41,1122
ushort_t Get_IRQ_Mask(50,1336
void Set_IRQ_Mask(58,1419
void Enable_IRQ(80,1784
void Disable_IRQ(95,2029
void Begin_IRQ(111,2326
void End_IRQ(119,2485

geekos/trap.c,93
static void GPF_Handler(25,593
static void Syscall_Handler(41,919
void Init_Traps(66,1586

geekos/setup.asm,442
start_setup:start_setup21,532
setup_32:setup_3262,1461
.returnAddr:.returnAddr94,2146
.here:.here96,2188
Kill_Motor:Kill_Motor102,2289
Init_PIC:Init_PIC108,2346
Delay:Delay143,3168
.done:.done145,3186
Enable_A20:Enable_A20149,3277
mem_size_kbytes:mem_size_kbytes163,3536
NUM_GDT_ENTRIES 174,3970
GDT_ENTRY_SZ 175,4020
align 177,4070
GDT:GDT178,4084
GDT_Pointer:GDT_Pointer207,5081
IDT_Pointer:IDT_Pointer211,5176

geekos/tss.c,247
static struct TSS s_theTSS;25,545
static struct Segment_Descriptor *s_tssDesc;s_tssDesc26,573
static ushort_t s_tssSelector;27,618
static void __inline__ Load_Task_Register(29,650
void Init_TSS(46,1023
void Set_Kernel_Stack_Pointer(65,1526

geekos/dma.c,1023
#define VALID_CHANNEL(53,1569
#define DMA_MAX_ADDR	59,1711
#define VALID_MEM(60,1745
#define DMA_BASE	65,1861
#define DMA_COMMAND_REG	66,1924
#define DMA_STATUS_REG	67,1989
#define DMA_REQUEST_REG	68,2051
#define DMA_MASK_ONE_REG	69,2116
#define DMA_MODE_REG	70,2190
#define DMA_CLEAR_FF_REG	71,2249
#define DMA_MASTER_CLEAR_REG	72,2326
#define DMA_TEMP_REG	73,2399
#define DMA_CLEAR_MASK_REG	74,2469
#define DMA_MASK_ALL_REG	75,2539
#define DMA_ADDR_REG(81,2722
#define DMA_COUNT_REG(82,2818
#define DMA_MASK_ENABLE	87,2951
#define DMA_MODE_SINGLE	92,3061
#define DMA_MODE_CASCADE	93,3127
#define DMA_MODE_READ	94,3218
#define DMA_MODE_WRITE	95,3269
static const uchar_t s_dmaPageRegisterList[s_dmaPageRegisterList100,3352
#define DMA_PAGE_REG(106,3528
#define IS_RESERVED(108,3627
#  define Debug(112,3731
#  define Debug(114,3774
static uchar_t s_allocated;121,3972
void Init_DMA(130,4261
bool Reserve_DMA(143,4524
void Setup_DMA(171,5115
void Mask_DMA(229,7020
void Unmask_DMA(242,7283

geekos/segment.c,310
static __inline__ void Set_Size_And_Base_Pages(20,473
static __inline__ void Set_Size_And_Base_Bytes(43,1211
void Init_Null_Segment_Descriptor(59,1631
void Init_Code_Segment_Descriptor(67,1790
void Init_Data_Segment_Descriptor(88,2338
void Init_TSS_Descriptor(109,2870
void Init_LDT_Descriptor(123,3290

geekos/bget.c,1982
#define SizeQuant 413,20389
#define BestFit 443,21445
#define assert(459,21912
#define NDEBUG	466,22004
extern char *sprintf(sprintf468,22140
#define DumpData 478,22366
#define MemSize 491,22559
struct qlinks 496,22686
    struct bfhead *flink;flink497,22702
    struct bfhead *blink;blink498,22753
struct bhead 503,22853
    bufsize prevfree;504,22868
    bufsize bsize;507,23006
#define BH(510,23101
struct bdhead 514,23196
    bufsize tsize;515,23212
    struct bhead bh;516,23275
#define BDH(518,23326
struct bfhead 522,23396
    struct bhead bh;523,23412
    struct qlinks ql;524,23475
#define BFH(526,23532
static struct bfhead freelist 528,23572
static bufsize totalloc 535,23697
static long numget 536,23770
static long numpblk 538,23861
static long numpget 539,23920
static long numdget 540,23994
static bufsize exp_incr 552,24339
static bufsize pool_len 553,24401
#define QLSize	563,24659
#define SizeQ	564,24698
#define V 566,24757
#define ESent	572,25031
void *bget(bget576,25149
void *bgetz(bgetz762,30326
void *bgetr(bgetr792,31056
void brel(827,31857
void bectl(976,36406
void bpool(991,36769
void bstats(1060,38981
void bstatse(1085,39509
void bufdump(1105,40055
void bpoold(1165,41520
int bpoolv(1214,42827
#define Repeatable 1265,43899
#define OUR_RAND	1271,44150
#define PoolSize 1276,44287
#define PoolSize 1278,44354
#define ExpIncr 1280,44421
#define CompactTries 1281,44485
#define dumpAlloc 1283,44551
#define dumpFree 1284,44611
extern long time(1287,44686
extern char *malloc(malloc1290,44714
extern int free _(1291,44737
static char *bchain bchain1293,44767
static char *bp bp1294,44832
static ulong_t int next 1300,44930
int rand(1304,44994
void srand(1312,45126
static void stats(1321,45255
static int protect 1345,45992
static int bcompact(1349,46118
static void *bexpand(bexpand1396,46999
static void bshrink(1419,47535
static bufsize blimit(1439,47922
int main(1462,48343

geekos/user.c,124
void Attach_User_Context(30,713
void Detach_User_Context(52,1215
int Spawn(86,2182
void Switch_To_User_Context(121,3479

geekos/ide.c,2542
#define IDE_DATA_REGISTER	31,814
#define IDE_ERROR_REGISTER	32,847
#define IDE_FEATURE_REG	33,881
#define IDE_SECTOR_COUNT_REGISTER	34,926
#define IDE_SECTOR_NUMBER_REGISTER	35,966
#define IDE_CYLINDER_LOW_REGISTER	36,1007
#define IDE_CYLINDER_HIGH_REGISTER	37,1047
#define IDE_DRIVE_HEAD_REGISTER	38,1088
#define IDE_STATUS_REGISTER	39,1127
#define IDE_COMMAND_REGISTER	40,1162
#define IDE_DEVICE_CONTROL_REGISTER	41,1198
#define IDE_DRIVE_0	44,1254
#define IDE_DRIVE_1	45,1281
#define IDE_COMMAND_IDENTIFY_DRIVE	48,1324
#define IDE_COMMAND_SEEK	49,1364
#define IDE_COMMAND_READ_SECTORS	50,1395
#define IDE_COMMAND_READ_BUFFER	51,1433
#define IDE_COMMAND_WRITE_SECTORS	52,1471
#define IDE_COMMAND_WRITE_BUFFER	53,1510
#define IDE_COMMAND_DIAGNOSTIC	54,1548
#define IDE_COMMAND_ATAPI_IDENT_DRIVE	55,1585
#define	IDE_INDENTIFY_NUM_CYLINDERS	58,1677
#define	IDE_INDENTIFY_NUM_HEADS	59,1718
#define	IDE_INDENTIFY_NUM_BYTES_TRACK	60,1756
#define	IDE_INDENTIFY_NUM_BYTES_SECTOR	61,1799
#define	IDE_INDENTIFY_NUM_SECTORS_TRACK	62,1843
#define IDE_STATUS_DRIVE_BUSY	65,1919
#define IDE_STATUS_DRIVE_READY	66,1955
#define IDE_STATUS_DRIVE_WRITE_FAULT	67,1992
#define IDE_STATUS_DRIVE_SEEK_COMPLETE	68,2034
#define IDE_STATUS_DRIVE_DATA_REQUEST	69,2078
#define IDE_STATUS_DRIVE_CORRECTED_DATA	70,2121
#define IDE_STATUS_DRIVE_INDEX	71,2166
#define IDE_STATUS_DRIVE_ERROR	72,2203
#define IDE_DCR_NOINTERRUPT	75,2279
#define IDE_DCR_RESET	76,2313
#define	IDE_ERROR_NO_ERROR	79,2391
#define	IDE_ERROR_BAD_DRIVE	80,2420
#define	IDE_ERROR_INVALID_BLOCK	81,2451
#define	IDE_ERROR_DRIVE_ERROR	82,2486
#define IDE_CONTROL_REGISTER	85,2548
#define IDE_CONTROL_SOFTWARE_RESET	86,2584
#define IDE_CONTROL_INT_DISABLE	87,2624
#define LOW_BYTE(89,2663
#define HIGH_BYTE(90,2694
#define IDE_MAX_DRIVES	92,2734
    short num_Cylinders;95,2779
    short num_Heads;96,2804
    short num_SectorsPerTrack;97,2825
    short num_BytesPerSector;98,2856
} ideDisk;99,2886
int ideDebug 101,2898
static int numDrives;102,2916
static ideDisk drives[drives103,2938
struct Thread_Queue s_ideWaitQueue;105,2978
struct Block_Request_List s_ideRequestQueue;106,3014
static int IDE_getNumBlocks(112,3133
static int IDE_Read(126,3469
static int IDE_Write(201,5628
static int IDE_Open(273,7651
static int IDE_Close(279,7742
static int IDE_Get_Num_Blocks(285,7833
static struct Block_Device_Ops s_ideDeviceOps 290,7934
static void IDE_Request_Thread(296,8041
static int readDriveConfig(316,8579
void Init_IDE(371,10533

geekos/destroyThread,33
static void Destroy_Thread(3,60

geekos/int.c,212
ulong_t Get_Current_EFLAGS(18,456
static void Dummy_Interrupt_Handler(29,797
static void Print_Selector(36,960
void Init_Interrupts(49,1337
bool Interrupts_Enabled(71,1853
void Dump_Interrupt_State(80,2017

geekos/util.asm,82
PrintHex:PrintHex17,533
.PrintDigit:.PrintDigit20,584
PrintNL:PrintNL34,951

geekos/mem.c,356
struct Page* g_pageList;29,831
uint_t g_freePageCount 34,920
extern int debugFaults;43,1161
#define Debug(44,1185
static struct Page_List s_freeList;49,1288
int unsigned s_numPages;54,1367
static void Add_Page_Range(59,1461
extern char end;94,2301
void Init_Mem(100,2437
void Init_BSS(165,4797
void* Alloc_Page(176,4990
void Free_Page(204,5601

geekos/bitset.c,261
#define FIND_OFFSET_AND_BIT(17,449
#define FIND_NUM_BYTES(23,579
void* Create_Bit_Set(26,671
void Set_Bit(40,904
void Clear_Bit(48,1069
bool Is_Bit_Set(56,1237
int Find_First_Free_Bit(64,1418
int Find_First_N_Free(87,1875
void Destroy_Bit_Set(106,2234

geekos/crc32.c,117
#define POLYNOMIAL 12,263
static ulong_t crc_table[crc_table13,302
void Init_CRC32(20,518
ulong_t crc32(42,1322

geekos/idt.c,409
static union IDT_Descriptor s_IDT[s_IDT21,551
extern char g_entryPointTableStart,29,825
extern char g_entryPointTableStart, g_entryPointTableEnd;29,825
extern int g_handlerSizeNoErr,30,883
extern int g_handlerSizeNoErr, g_handlerSizeErr;30,883
Interrupt_Handler g_interruptTable[g_interruptTable37,1091
void Init_IDT(50,1515
void Init_Interrupt_Gate(97,2906
void Install_Interrupt_Handler(115,3474

geekos/userseg.c,245
#define DEFAULT_USER_STACK_SIZE 28,772
static bool Validate_User_Memory(45,1122
void Destroy_User_Context(68,1700
int Load_User_Program(97,2664
bool Copy_From_User(127,3690
bool Copy_To_User(154,4569
void Switch_To_Address_Space(168,4892

geekos/bootsect.asm,816
PFAT_BOOT_RECORD_SIZE 31,898
BIOS_SIGNATURE_OFFSET 32,927
BeginText:BeginText41,1144
after_move:after_move56,1605
load_setup:load_setup86,2189
.again:.again90,2273
load_kernel:load_kernel118,3203
.again:.again126,3559
ReadSector:ReadSector169,4822
readRetry:readRetry230,6161
dead:dead260,6948
.here:.here264,7036
readDone:readDone266,7054
head:head279,7372
track:track280,7383
sec:sec281,7395
num_retries:num_retries282,7405
numHeads:numHeads284,7424
numCylinders:numCylinders285,7444
sectorsPerTrack:sectorsPerTrack286,7463
sec_count:sec_count289,7547
GetParam:GetParam291,7564
PadFromStart 322,8053
setupStart:setupStart342,8227
setupSize:setupSize346,8276
kernelStart:kernelStart350,8322
kernelSize:kernelSize354,8370
PadFromStart 357,8389
Signature 358,8424

geekos/blockdev.c,603
#  define Debug(21,496
#  define Debug(23,539
static struct Mutex s_blockdevLock;33,822
DEFINE_LIST(38,910
IMPLEMENT_LIST(39,956
static struct Block_Device_List s_deviceList;45,1085
static int Do_Request(51,1221
int Register_Block_Device(75,1925
int Open_Block_Device(110,2859
int Close_Block_Device(145,3501
struct Block_Request *Create_Request(Create_Request164,3816
void Post_Request_And_Wait(184,4365
struct Block_Request *Dequeue_Request(Dequeue_Request213,5076
void Notify_Request_Completion(231,5548
int Block_Read(244,5895
int Block_Write(253,6110
int Get_Num_Blocks(261,6286

geekos/keyboard.c,1030
#define LEFT_SHIFT 45,1096
#define RIGHT_SHIFT 46,1121
#define LEFT_CTRL 47,1146
#define RIGHT_CTRL 48,1171
#define LEFT_ALT 49,1196
#define RIGHT_ALT 50,1221
#define SHIFT_MASK 51,1246
#define CTRL_MASK 52,1293
#define ALT_MASK 53,1338
static unsigned s_shiftState 54,1381
#define QUEUE_SIZE 60,1510
#define QUEUE_MASK 61,1533
#define NEXT(62,1557
static Keycode s_queue[s_queue63,1606
static int s_queueHead,64,1642
static int s_queueHead, s_queueTail;64,1642
static struct Thread_Queue s_waitQueue;69,1744
static const Keycode s_scanTableNoShift[s_scanTableNoShift74,1860
#define SCAN_TABLE_SIZE 98,3256
static const Keycode s_scanTableWithShift[s_scanTableWithShift105,3485
static __inline__ bool Is_Queue_Empty(130,4884
static __inline__ bool Is_Queue_Full(135,4972
static __inline__ void Enqueue_Keycode(140,5065
static __inline__ Keycode Dequeue_Keycode(148,5229
static void Keyboard_Interrupt_Handler(160,5470
void Init_Keyboard(261,7611
bool Read_Key(289,8242
Keycode Wait_For_Key(310,8581

geekos/pfat.c,1502
#define PAGEFILE_FILENAME 41,1071
int debugPFAT 43,1114
#define Debug(44,1133
DEFINE_LIST(47,1211
struct PFAT_Instance 53,1378
    bootSector fsinfo;54,1401
    int *fat;fat55,1424
    directoryEntry *rootDir;rootDir56,1438
    directoryEntry rootDirEntry;57,1467
    struct Mutex lock;58,1500
    struct PFAT_File_List fileList;59,1523
struct PFAT_File 68,1735
    directoryEntry *entry;entry69,1754
    ulong_t numBlocks;70,1817
    char *fileDataCache;fileDataCache71,1879
    struct Bit_Set *validBlockSet;validBlockSet72,1928
    struct Mutex lock;73,2007
    DEFINE_LINK(74,2071
IMPLEMENT_LIST(76,2118
static void Copy_Stat(82,2249
static int PFAT_FStat(98,2650
static int PFAT_Read(108,2883
static int PFAT_Write(191,5410
static int PFAT_Seek(200,5588
static int PFAT_Close(211,5775
static struct File_Ops s_pfatFileOps 224,6043
static int PFAT_FStat_Dir(233,6195
static int PFAT_Close_Dir(244,6519
static int PFAT_Read_Entry(253,6643
static struct File_Ops s_pfatDirOps 279,7441
static directoryEntry *PFAT_Lookup(PFAT_Lookup291,7662
static struct PFAT_File *Get_PFAT_File(Get_PFAT_File328,8576
static int PFAT_Open(396,10321
static int PFAT_Open_Directory(439,11332
static int PFAT_Stat(468,12135
static int PFAT_Sync(490,12604
struct Mount_Point_Ops s_pfatMountPointOps 499,12772
static void PFAT_Register_Paging_File(513,13120
static int PFAT_Mount(563,14599
static struct Filesystem_Ops s_pfatFilesystemOps 681,18140
void Init_PFAT(690,18403

geekos/syscall.c,406
static int Sys_Null(34,857
static int Sys_Exit(47,1094
static int Sys_PrintString(60,1388
static int Sys_GetKey(73,1698
static int Sys_SetAttr(85,1931
static int Sys_GetCursor(98,2278
static int Sys_PutCursor(111,2551
static int Sys_Spawn(126,2967
static int Sys_Wait(139,3239
static int Sys_GetPID(151,3490
const Syscall g_syscallTable[g_syscallTable161,3652
const int g_numSyscalls 177,3902

geekos/floppy.c,2792
#define FDC_IRQ	58,1560
#define FDC_DMA	63,1611
#define FDC_BASE	68,1653
#define FDC_DOR_REG	69,1678
#define FDC_STATUS_REG	70,1747
#define FDC_DATA_RATE_SELECT_REG	71,1814
#define FDC_DATA_REG	72,1896
#define FDC_STATUS_MRQ	77,1989
#define FDC_STATUS_DIO	78,2023
#define FDC_STATUS_NDMA	79,2057
#define FDC_STATUS_BUSY	80,2092
#define FDC_STATUS_ACTIVE(81,2127
#define FDC_STATUS_READY_MASK	82,2175
#define FDC_STATUS_READY_WRITE	83,2240
#define FDC_STATUS_READY_READ	84,2287
#define FDC_DOR_MOTOR(89,2398
#define FDC_DOR_DMA_ENABLE	90,2449
#define FDC_DOR_RESET_DISABLE	91,2486
#define FDC_DOR_DRIVE_SELECT(92,2526
#define FDC_COMMAND_CALIBRATE	97,2598
#define FDC_COMMAND_SENSE_INT_STATUS	98,2634
#define FDC_COMMAND_SEEK	99,2676
#define FDC_COMMAND_WRITE_SECTOR	100,2707
#define FDC_COMMAND_READ_SECTOR	101,2745
#define FDC_MULTI_TRACK	106,2807
#define FDC_MFM	107,2838
#define FDC_SKIP_DELETED	108,2862
#define FDC_ST0_SEEK_END	113,2941
#define FDC_ST0_IS_SUCCESS(114,2976
#define CMOS_OUT	120,3137
#define CMOS_IN	121,3161
#define CMOS_FLOPPY_INDEX	122,3185
enum { FLOPPY_READ,124,3218
enum { FLOPPY_READ, FLOPPY_WRITE 124,3218
#  define Debug(128,3301
#  define Debug(130,3344
struct Floppy_Parameters 140,3577
    int cylinders;141,3604
    int heads;142,3623
    int sectors;143,3638
    int sectorSizeCode;144,3655
    int gapLengthCode;145,3679
#define INVALID_FLOPPY_TYPE 147,3705
static struct Floppy_Parameters s_floppyParamsTable[s_floppyParamsTable153,3863
#define NUM_FLOPPY_TYPES 161,4212
#define IS_VALID_FLOPPY_TYPE(162,4302
struct Floppy_Drive 168,4482
    struct Floppy_Parameters *params;params169,4504
struct Floppy_Drive s_driveTable[s_driveTable175,4613
static volatile int s_interruptOccurred;180,4712
static uchar_t *s_transferBuf;s_transferBuf185,4800
static struct Block_Request_List s_floppyRequestQueue;190,4878
static struct Thread_Queue s_floppyWaitQueue;196,5032
static int Floppy_Open(205,5304
static int Floppy_Close(214,5451
static int Floppy_Get_Num_Blocks(223,5607
static struct Block_Device_Ops s_floppyDeviceOps 241,6021
static void Floppy_Interrupt_Handler(256,6356
static void Setup_Drive_Parameters(268,6630
static void LBA_To_CHS(291,7327
static void Wait_For_MRQ(311,8006
static uchar_t Floppy_In(325,8379
static void Floppy_Out(334,8535
static void Wait_For_Interrupt(344,8752
static void Sense_Interrupt_Status(358,9004
static bool Calibrate(368,9203
static void Start_Motor(395,9831
static void Stop_Motor(401,9992
static bool Reset_Controller(411,10222
static bool Floppy_Seek(426,10485
static int Floppy_Transfer(468,11336
static int Floppy_Read(544,13389
static int Floppy_Write(568,13906
static void Floppy_Request_Thread(579,14229
void Init_Floppy(614,15356

geekos/defs.asm,430
BOOTSEG 20,599
INITSEG 24,730
SETUPSEG 27,805
KERNSEG 32,979
PFAT_BOOT_RECORD_SIZE 36,1067
BIOS_SIGNATURE_OFFSET 39,1145
PFAT_BOOT_RECORD_OFFSET 42,1221
VIDSEG 45,1319
SECTORS_PER_TRACK 49,1426
HEADS 50,1451
CYLINDERS 51,1463
ICW1 62,1838
ICW2_MASTER 65,1973
ICW2_SLAVE 66,2045
ICW3_MASTER 67,2089
ICW3_SLAVE 68,2135
ICW4 69,2172
KERNEL_CS 74,2349
KERNEL_DS 75,2405
KERN_THREAD_OBJ 80,2646
KERN_STACK 81,2678

tools/buildFat.c,74
#define SECTOR_SIZE 11,193
int roundToNextBlock(13,218
int main(22,374

tools/Makefile,0

geekos/symbol.asm,0

geekos/README.txt,0

geekos/depend.mak,0

TAGS,0
